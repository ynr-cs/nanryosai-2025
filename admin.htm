<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- 各ページで<title>は書き換える -->
    <title>管理画面 | 南陵祭'25</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        
        /* ==============================
         * 基本設定と変数
         * ============================== */
        :root {
            --header-height: 80px;
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --sidenav-width: 320px;
            --shadow-medium: 0 15px 50px rgba(0, 0, 0, 0.15);
            --shadow-strong: 0 20px 60px rgba(0, 0, 0, 0.2);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--bg-gradient);
            min-height: 100vh;
            display: flex; flex-direction: column;
            padding-top: var(--header-height);
            overflow-x: hidden;
            position: relative;
        }
        body.sidenav-open { overflow: hidden; }

        body::before { /* 背景の装飾 */
            content: ''; position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background: radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 40%),
                        radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 40%);
            pointer-events: none; z-index: -1;
        }

        main {
            flex-grow: 1; /* フッターを下に押し出す */
            position: relative; z-index: 2;
        }

        /* --- 共通のコンテナ（必要なら使う） --- */
        .content-wrapper {
            max-width: 960px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        
        /* ==============================
         * ヘッダー
         * ============================== */
        .site-header { position: fixed; top: 0; left: 0; width: 100%; height: var(--header-height); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(255, 255, 255, 0.2); z-index: 100; transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1); padding: 0 80px 0 30px; display: flex; align-items: center; } .site-header.hidden { transform: translateY(-100%); opacity: 0; }
        .site-title a { font-size: 1.8em; font-weight: 700; background: linear-gradient(45deg, #fff, #e8f4f8); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; text-decoration: none; transition: all 0.3s ease; animation: float 6s ease-in-out infinite; }
        .desktop-nav { margin-left: auto; } .desktop-nav ul { display: flex; list-style: none; gap: 30px; } .desktop-nav a { text-decoration: none; color: rgba(255, 255, 255, 0.9); font-weight: 500; padding: 10px 20px; border-radius: 25px; position: relative; transition: all 0.3s ease; } .desktop-nav a::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.1); border-radius: 25px; opacity: 0; transition: opacity 0.3s ease; } .desktop-nav a:hover::before { opacity: 1; } .desktop-nav a:hover { color: white; transform: translateY(-2px); }
        .hamburger-menu { position: fixed; top: 20px; right: 30px; width: 50px; height: 50px; background: var(--accent-gradient); border-radius: 50%; cursor: pointer; z-index: 300; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 4px; transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1); box-shadow: var(--shadow-medium); } .hamburger-menu:hover { transform: scale(1.1) rotate(5deg); box-shadow: var(--shadow-strong); } .hamburger-menu .bar { width: 22px; height: 2px; background-color: white; border-radius: 2px; transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1); } body.sidenav-open .hamburger-menu { background: white; backdrop-filter: blur(10px); } body.sidenav-open .hamburger-menu .bar { background-color: #2c3e50; } body.sidenav-open .hamburger-menu .bar1 { transform: translateY(6px) rotate(45deg); } body.sidenav-open .hamburger-menu .bar2 { opacity: 0; transform: scaleX(0); } body.sidenav-open .hamburger-menu .bar3 { transform: translateY(-6px) rotate(-45deg); }
        .sidenav { position: fixed; top: 0; right: 0; width: var(--sidenav-width); max-width: 90vw; height: 100%; background: rgba(0, 0, 0, 0.2); backdrop-filter: blur(30px); border-left: 1px solid rgba(255, 255, 255, 0.2); z-index: 200; padding: 100px 30px 30px; transform: translateX(100%); transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1); } body.sidenav-open .sidenav { transform: translateX(0); } .sidenav ul { list-style: none; } .sidenav li { margin-bottom: 8px; opacity: 0; transform: translateX(30px); transition: opacity 0.4s ease, transform 0.4s ease; } body.sidenav-open .sidenav li { opacity: 1; transform: translateX(0); } body.sidenav-open .sidenav li:nth-child(1) { transition-delay: 0.1s; } body.sidenav-open .sidenav li:nth-child(2) { transition-delay: 0.15s; } body.sidenav-open .sidenav li:nth-child(3) { transition-delay: 0.2s; } body.sidenav-open .sidenav li:nth-child(4) { transition-delay: 0.25s; } body.sidenav-open .sidenav li:nth-child(5) { transition-delay: 0.3s; } body.sidenav-open .sidenav li:nth-child(6) { transition-delay: 0.35s; } body.sidenav-open .sidenav li:nth-child(7) { transition-delay: 0.4s; } .sidenav a { color: rgba(255, 255, 255, 0.9); text-decoration: none; display: block; font-size: 1.1em; font-weight: 500; padding: 18px 25px; border-radius: 15px; transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1); } .sidenav a:hover { color: white; background: rgba(255, 255, 255, 0.1); transform: translateX(10px); } .sidenav .about-us { margin-top: 40px; padding-top: 30px; border-top: 1px solid rgba(255, 255, 255, 0.2); } .sidenav .about-us a { font-size: 1em; color: rgba(255, 255, 255, 0.6); }
        .page-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0); z-index: 150; pointer-events: none; transition: background-color 0.5s; } body.sidenav-open .page-overlay { background-color: rgba(0, 0, 0, 0.6); pointer-events: auto; }
        .site-footer { background: rgba(0, 0, 0, 0.2); text-align: center; padding: 30px 20px; color: rgba(255, 255, 255, 0.8); font-size: 0.9em; }
        @keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-10px); } }
        @media (max-width: 900px) { .desktop-nav { display: none; } .site-header { padding: 0 80px 0 20px; } .hamburger-menu { right: 20px; width: 45px; height: 45px; } }
   /* ★★★ 管理画面専用CSS ★★★ */
.control-group {
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap; /* スマホで折り返す */
}
.control-label {
    font-size: 1.1em;
    font-weight: 500;
    color: rgba(255,255,255,0.9);
    min-width: 150px; /* ラベルの幅を揃える */
}
.control-select {
    flex-grow: 1; /* 残りのスペースを埋める */
    padding: 10px 15px;
    font-size: 1em;
    border-radius: 8px;
    border: 1px solid rgba(255,255,255,0.3);
    background: rgba(0,0,0,0.3);
    color: white;
    appearance: none; /* デフォルトの矢印を消す */
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E"); /* カスタム矢印 */
    background-repeat: no-repeat;
    background-position: right 10px center;
    max-width: 300px; /* PCでの最大幅 */
}
/* スマホでラベルが縦に並ぶように */
@media (max-width: 600px) {
    .control-group { flex-direction: column; align-items: flex-start; }
    .control-label { min-width: auto; margin-bottom: 5px; }
    .control-select { width: 100%; max-width: none; }
}
/* cta-button は既存のスタイルを再利用 */
.cta-button { /* ... 既存のcta-buttonのスタイルが適用される ... */ }
.info-card h2 { /* ... 既存のinfo-card h2のスタイルが適用される ... */ }    <!-- ▲▲▲ ここまでが各ページの固有コンテンツ ▲▲▲ -->
 

</style>

    const firebaseConfig = {apiKey: "AIzaSyBx6EpqZhlOKzyxGFC0K3mZuFR8C0oHuTw",authDomain: "nanryosai2025-admin.firebaseapp.com",projectId: "nanryosai2025-admin",storageBucket: "nanryosai2025-admin.firebasestorage.app",messagingSenderId: "151929704856",appId: "1:151929704856:web:177652fd1e1db3e6531bed",measurementId: "G-JBT4NE35VN"};
</head>
<body>
    <!-- ヘッダー -->
    <header class="site-header">
        <div class="site-title"><a href="index.htm">南陵祭'25</a></div> <!-- ← index.htm へのリンクに修正 -->
        <nav class="desktop-nav">
            <ul>
                <li><a href="about.htm">概要</a></li>
                <li><a href="projects-list.htm">企画一覧</a></li>
                <li><a href="stage-list.htm">ステージ発表</a></li> <!-- ← stage-list.htm に修正 -->
                <li><a href="map.htm">校内マップ</a></li>
                <li><a href="access.htm">アクセス</a></li>
            </ul>
        </nav>
    </header>

    <!-- ハンバーガーメニューアイコン -->
    <div class="hamburger-menu"> <span class="bar bar1"></span><span class="bar bar2"></span><span class="bar bar3"></span> </div>
    
    <!-- ページオーバーレイ -->
    <div class="page-overlay"></div>
    
    <!-- サイドナビゲーション -->
    <nav class="sidenav">
        <ul> <!-- ← この ul の中身を、全部正しいリンクに書き換える -->
            <li><a href="about.htm">概要</a></li>
            <li><a href="projects-list.htm">企画一覧</a></li>
            <li><a href="stage-list.htm">ステージ発表</a></li>
            <li><a href="timetable.htm">タイムテーブル</a></li>
            <li><a href="map.htm">校内マップ</a></li>
            <li><a href="access.htm">アクセス</a></li>
            <!-- <li><a href="news.htm">お知らせ</a></li> ※お知らせページを作る場合に使う -->
            <li class="about-us"><a href="about-us.htm">About Us</a></li>
        </ul>
    </nav>
    
    <!-- ▼▼▼ ここに各ページの固有コンテンツが入る ▼▼▼ -->
    <main>
    <div class="content-wrapper">
        <header class="page-header">
            <h1 class="page-title">リアルタイム情報 管理画面</h1>
        </header>

        <div class="info-card">
            <h2>ステージ状況更新</h2>
            <div class="control-group">
                <label for="event-name-select" class="control-label">現在のイベント名:</label>
                <select id="event-name-select" class="control-select">
                    <!-- JavaScriptがここにオプションを生成する -->
                    <option value="">イベントを選択</option>
                </select>
            </div>
            <div class="control-group">
                <label for="event-status-select" class="control-label">ステータス:</label>
                <select id="event-status-select" class="control-select">
                    <option value="まもなく開始">まもなく開始</option>
                    <option value="ライブ中！">ライブ中！</option>
                    <option value="準備中">準備中</option>
                    <option value="終了">終了</option>
                </select>
            </div>
            <div class="control-group">
                <label for="next-event-name-select" class="control-label">次のイベント名:</label>
                <select id="next-event-name-select" class="control-select">
                    <!-- JavaScriptがここにオプションを生成する -->
                    <option value="">イベントを選択</option>
                </select>
            </div>
            <div class="control-group text-center" style="margin-top: 30px;">
                <button id="update-button" class="cta-button">ステータスを更新</button>
            </div>
        </div>

        <div class="info-card" style="margin-top: 20px;">
            <h2>現在のリアルタイム情報</h2>
            <div id="current-realtime-display" style="text-align: center; padding: 20px 0; font-size: 1.2em; opacity: 0.9;">
                情報を読み込み中...
            </div>
        </div>
    </div>
</main>

    <!-- フッター -->
    <footer class="site-footer">
        <p>c 2024 横浜南陵高校 コンピューター科学部</p>
    </footer>

    <!-- ▼▼▼ 最後の<script>...</script>を、これでまるごと上書き ▼▼▼ -->
<script defer src="data.js"></script>
<script defer>
    // === 1. Firebase初期化 ===
    // 君がメモしたfirebaseConfigをここに貼り付ける！
    const firebaseConfig = {
        apiKey: "AIzaSyBx6EpqZhlOKzyxGFC0K3mZuFR8C0oHuTw",
        authDomain: "nanryosai2025-admin.firebaseapp.com",
        projectId: "nanryosai2025-admin",
        storageBucket: "nanryosai2025-admin.firebasestorage.app",
        messagingSenderId: "151929704856",
        appId: "1:151929704856:web:177652fd1e1db3e6531bed",
        measurementId: "G-JBT4NE35VN"
    };

    // Firebaseアプリを初期化
    firebase.initializeApp(firebaseConfig);
    // Realtime Databaseへの参照を取得
    const database = firebase.database();
    const realtimeInfoRef = database.ref('realtimeInfo/stageStatus'); // データベースのパス

    document.addEventListener('DOMContentLoaded', function() {
        // === 2. テンプレート共通の処理 ===
        const body = document.body; const hamburger = document.querySelector('.hamburger-menu'); const overlay = document.querySelector('.page-overlay'); function toggleSidenav() { body.classList.toggle('sidenav-open'); } hamburger.addEventListener('click', toggleSidenav); overlay.addEventListener('click', toggleSidenav); let lastScrollTop = 0; const header = document.querySelector('.site-header'); if (header) { const headerHeight = header.offsetHeight; window.addEventListener('scroll', function() { let scrollTop = window.pageYOffset || document.documentElement.scrollTop; if (scrollTop > lastScrollTop && scrollTop > headerHeight) { header.classList.add('hidden'); } else { header.classList.remove('hidden'); } lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; }); }
    
        // === 3. 管理画面の要素を取得 ===
        const currentEventSelect = document.getElementById('event-name-select');
        const eventStatusSelect = document.getElementById('event-status-select');
        const nextEventSelect = document.getElementById('next-event-name-select');
        const updateButton = document.getElementById('update-button');
        const currentRealtimeDisplay = document.getElementById('current-realtime-display');

        // === 4. プルダウンオプションの生成 ===
        // data.jsのstageDataを使って、イベント選択プルダウンを生成
        function populateEventSelects() {
            if (typeof stageData === 'undefined') {
                console.error("stageDataが読み込めていません。");
                return;
            }
            
            let optionsHTML = '<option value="">イベントを選択</option>';
            stageData.forEach(event => {
                optionsHTML += `<option value="${event.id}">${event.name}</option>`;
            });
            currentEventSelect.innerHTML = optionsHTML;
            nextEventSelect.innerHTML = optionsHTML; // 次のイベントも同じオプション
        }

        // === 5. Firebaseからのデータ読み込みと画面反映 ===
        // データベースの変更をリアルタイムで監視
        realtimeInfoRef.on('value', (snapshot) => {
            const data = snapshot.val(); // 現在のデータベースの値を取得
            if (data) {
                // 管理画面のプルダウンに現在の状態を反映
                currentEventSelect.value = data.currentEventId || '';
                eventStatusSelect.value = data.status || '準備中';
                nextEventSelect.value = data.nextEventId || '';

                // 「現在のリアルタイム情報」表示を更新
                const currentEvent = stageData.find(e => e.id === data.currentEventId);
                const nextEvent = stageData.find(e => e.id === data.nextEventId);

                let displayHTML = '';
                if (currentEvent) {
                    displayHTML += `<strong>【${currentEvent.place}】</strong><br>`;
                    displayHTML += `${currentEvent.name} <span style="background:var(--accent-gradient); color:white; padding: 2px 8px; border-radius:5px; font-size:0.8em; margin-left:10px;">${data.status}</span>`;
                    displayHTML += `<br><small>予定時間: ${currentEvent.time}</small>`;
                } else {
                    displayHTML += `現在のイベント情報がありません。<br>`;
                }
                if (nextEvent) {
                    displayHTML += `<br><strong style="opacity:0.8; font-size:0.9em; margin-top:10px; display:block;">NEXT: ${nextEvent.name} (${nextEvent.time})</strong>`;
                }

                currentRealtimeDisplay.innerHTML = displayHTML || '情報を読み込み中...';

            } else {
                currentRealtimeDisplay.innerHTML = 'まだ情報が登録されていません。';
            }
        });

        // === 6. 「ステータスを更新」ボタンのクリックイベント ===
        updateButton.addEventListener('click', function() {
            const currentEventId = currentEventSelect.value;
            const status = eventStatusSelect.value;
            const nextEventId = nextEventSelect.value;

            if (!currentEventId) {
                alert('現在のイベントを選択してください。');
                return;
            }

            // Firebaseデータベースにデータを書き込む
            realtimeInfoRef.set({
                currentEventId: currentEventId,
                status: status,
                nextEventId: nextEventId
            })
            .then(() => {
                alert('リアルタイム情報を更新しました！');
            })
            .catch((error) => {
                console.error("Firebaseへの書き込みエラー:", error);
                alert('情報の更新に失敗しました。');
            });
        });

        // === 7. 初期化処理 ===
        // stageDataが読み込まれてからプルダウンを生成
        if (typeof stageData !== 'undefined') {
            populateEventSelects();
        } else {
            // もしdata.jsの読み込みが遅れた場合、window.onloadを待ってから実行
            window.addEventListener('load', populateEventSelects, { once: true });
        }
    });
</script>
</body>
</html>
